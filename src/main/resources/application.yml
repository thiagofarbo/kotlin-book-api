spring:
  restTemplate:
    # Configuration global de timeout
    read-timeout: 9000
    connect-timeout: 9000
  datasource:
    url: jdbc:postgresql://localhost:5432/book
    username: admin
    password: admin
    jpa:
      database-platform: org.hibernate.dialect.PostgreSQLDialect
      driver-class-name: org.postgresql.Driver
      hibernate:
        ddl-auto: update
      properties:
        hibernate.default_schema: book

# Redis Configuration
redis:
  port: 6379
  host: localhost
  topic:
    customer: customer
    book: book
  pool:
    maxIdle: 8 # max idle connections in the pool
    minIdle: 0 # min idle connections in the pool
    maxActive: -1 # no limit to the number of active connections
    maxWait: 30000 # time limit to get a connection - only applies if maxActive is finite

# Flyway Configuration
  flyway:
    enabled: true
    baselineOnMigrate: true
    locations: classpath:/db/migration
    check-location: false

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
  endpoint:
    prometheus:
        enabled: true
    metrics:
        enabled: true
bootstrap:
  servers: localhost:9092

mongodb:
  host: localhost
  port: 27017
  database: shipping-event

kafka:
#  bootstrap:
#  servers: localhost:9092   # Kafka broker addresses
  # Producer settings (for sending events)
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer    # Serializer for the key
    value-serializer: org.springframework.kafka.support.serializer.JsonSerializer  # Serializer for the value (event)
    acks: all  # Ensure all replicas acknowledge the message
    retries: 3 # Number of retries in case of failure
    batch-size: 16384   # Batch size in bytes
    linger-ms: 1        # Time to wait before sending a batch
    buffer-memory: 33554432 # Buffer size in memory
    # Consumer settings (for consume events)
  consumer:
    group-id: shipping-event    # Group ID for the consumer
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # Deserializer for the key
    value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer  # Wraps JsonDeserializer for error handling
    properties:
      spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
      spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
      spring.json.trusted.packages: "*"  # You can restrict this to your package for added security
topic:
  book:
    consumer: book
    producer: book
    groupId: group_id
  shipping-event:
    consumer: shipping-event
    producer: shipping-event
    groupId: shipping-event

hash:
  key:
    book: book
    customer: customer
